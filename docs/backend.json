{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user on the Tabdeel platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "avatarUrl": {
          "type": "string",
          "description": "URL of the user's avatar image.",
          "format": "uri"
        },
        "city": {
          "type": "string",
          "description": "User's city in Pakistan."
        },
        "bio": {
          "type": "string",
          "description": "User's biography or description."
        },
        "preferences": {
          "type": "array",
          "description": "List of category IDs representing the user's interests.",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "description": "Timestamp indicating the last time the user was active on the platform.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "city",
        "createdAt"
      ]
    },
    "Item": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Item",
      "type": "object",
      "description": "Represents an item listed for barter on the Tabdeel platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the item entity."
        },
        "ownerId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Item)"
        },
        "title": {
          "type": "string",
          "description": "Title of the item."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the item."
        },
        "images": {
          "type": "array",
          "description": "Array of URLs pointing to images of the item.",
          "items": {
            "type": "string"
          }
        },
        "category": {
          "type": "string",
          "description": "Category of the item."
        },
        "condition": {
          "type": "string",
          "description": "Condition of the item (e.g., Like New, Good, Fair)."
        },
        "city": {
          "type": "string",
          "description": "City where the item is located."
        },
        "desiredKeywords": {
          "type": "string",
          "description": "Keywords describing what the owner wants in exchange for the item."
        },
        "desiredCategories": {
          "type": "array",
          "description": "List of category IDs representing the items the owner desires in exchange.",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "description": "Status of the item (e.g., active, exchanged, removed)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the item was listed.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the item was last updated.",
          "format": "date-time"
        },
        "embeddings": {
          "type": "array",
          "description": "Array of floating-point numbers representing the item's text embeddings.",
          "items": {
            "type": "number"
          }
        },
        "tags": {
          "type": "array",
          "description": "Tags associated with the item.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "ownerId",
        "title",
        "description",
        "category",
        "condition",
        "city",
        "desiredKeywords",
        "status",
        "createdAt"
      ]
    },
    "SwapRequest": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SwapRequest",
      "type": "object",
      "description": "Represents a request to swap items between two users.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the swap request entity."
        },
        "targetItemId": {
          "type": "string",
          "description": "Reference to Item. (Relationship: Item 1:N SwapRequest) The item that is being requested."
        },
        "targetOwnerId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N SwapRequest) The owner of the target item."
        },
        "requesterId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N SwapRequest) The user making the swap request."
        },
        "offeredItemIds": {
          "type": "array",
          "description": "References to Items. (Relationship: Item N:N SwapRequest) List of item IDs offered by the requester in the swap.",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string",
          "description": "Message from the requester to the item owner."
        },
        "status": {
          "type": "string",
          "description": "Status of the swap request (e.g., pending, accepted, declined, countered)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the swap request was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the swap request was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "targetItemId",
        "targetOwnerId",
        "requesterId",
        "offeredItemIds",
        "status",
        "createdAt"
      ]
    },
    "Message": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Message",
      "type": "object",
      "description": "Represents a message within a swap request or a direct chat.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the message entity."
        },
        "swapRequestId": {
          "type": "string",
          "description": "Reference to SwapRequest. (Relationship: SwapRequest 1:N Message).  The swap request this message belongs to.  If null, it's a direct message.",
          "format": "uuid"
        },
        "senderId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Message) The user who sent the message."
        },
        "text": {
          "type": "string",
          "description": "Content of the message."
        },
        "attachments": {
          "type": "array",
          "description": "List of URLs pointing to attached files (e.g., images).",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "senderId",
        "text",
        "createdAt"
      ]
    },
    "Category": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Category",
      "type": "object",
      "description": "Represents a category for items.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the category."
        },
        "name": {
          "type": "string",
          "description": "Name of the category."
        },
        "description": {
          "type": "string",
          "description": "Description of the category."
        }
      },
      "required": [
        "id",
        "name"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. The 'userId' is the Firebase Auth UID.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching the Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/items/{itemId}",
        "definition": {
          "entityName": "Item",
          "schema": {
            "$ref": "#/backend/entities/Item"
          },
          "description": "Stores items listed by a user. Includes denormalized 'ownerId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user who owns the item."
            },
            {
              "name": "itemId",
              "description": "The unique identifier for the item."
            }
          ]
        }
      },
      {
        "path": "/users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}",
        "definition": {
          "entityName": "SwapRequest",
          "schema": {
            "$ref": "#/backend/entities/SwapRequest"
          },
          "description": "Stores swap requests for an item. Includes denormalized 'targetOwnerId' and 'requesterId' for authorization independence.",
          "params": [
            {
              "name": "targetOwnerId",
              "description": "The unique identifier for the owner of the target item."
            },
            {
              "name": "targetItemId",
              "description": "The unique identifier for the target item."
            },
            {
              "name": "swapRequestId",
              "description": "The unique identifier for the swap request."
            }
          ]
        }
      },
      {
        "path": "/users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}/messages/{messageId}",
        "definition": {
          "entityName": "Message",
          "schema": {
            "$ref": "#/backend/entities/Message"
          },
          "description": "Stores messages associated with a specific swap request.",
          "params": [
            {
              "name": "targetOwnerId",
              "description": "The unique identifier for the owner of the target item in the swap request."
            },
            {
              "name": "targetItemId",
              "description": "The unique identifier for the target item in the swap request."
            },
            {
              "name": "swapRequestId",
              "description": "The unique identifier for the swap request."
            },
            {
              "name": "messageId",
              "description": "The unique identifier for the message."
            }
          ]
        }
      },
      {
        "path": "/categories/{categoryId}",
        "definition": {
          "entityName": "Category",
          "schema": {
            "$ref": "#/backend/entities/Category"
          },
          "description": "Stores item categories.",
          "params": [
            {
              "name": "categoryId",
              "description": "The unique identifier for the category."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to be secure, scalable, and debuggable, adhering to the core principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). Authorization Independence is achieved by denormalizing authorization data (e.g., ownerId) into subcollections where necessary, avoiding `get()` calls in security rules. Structural Segregation is maintained by keeping data with different access requirements in separate collections. Access Modeling is standardized with path-based ownership for user-owned data and membership maps for collaborative data. \n\nSpecifically:\n\n*   **Users:** User data is stored in `/users/{userId}`.  This path structure ensures clear ownership. The `userId` is implicitly the user's authentication UID.\n*   **Items:** Items are stored in `/users/{userId}/items/{itemId}` to represent the User 1:N Item relationship.  The item documents contain the `ownerId` field, which is redundant but intentionally denormalized to ensure authorization independence (no need for rules to `get()` the user document to check ownership).\n*   **SwapRequests:** Swap requests are stored in `/users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}`. This structure nests swap requests under the target item and its owner for easy querying and access control. Crucially, the `targetOwnerId` is denormalized into the swap request to avoid authorization dependencies on the parent item.  The `requesterId` is also present for easier querying.\n*   **Messages:** Messages are stored within the swap request in `/users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}/messages/{messageId}`.  This isolates messages to participants of the swap and simplifies security rules.  The `senderId` is within the message.\n*   **Categories:** Categories are stored in a flat `/categories/{categoryId}` collection.  These are globally accessible and do not require complex authorization.\n\nThis structure supports the required QAPs:\n\n*   Listing items is secured via the `/users/{userId}/items/{itemId}` path and rules that ensure the user is the owner. Public read access can be configured, with write access restricted to the owner.\n*   Swap request access is limited to the involved parties through the nested structure and rules that check `targetOwnerId` and `requesterId`.\n*   The explicit `status` field for items (`active`, `exchanged`, `removed`) facilitates filtering and prevents unauthorized access to inactive items.\n*   The use of path-based ownership and explicit `ownerId` fields enables secure list operations, as rules can easily filter based on the authenticated user's ID."
  }
}
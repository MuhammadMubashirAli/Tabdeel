/**
 * @fileoverview Firestore Security Rules for Tabdeel Platform
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing a strict user-ownership model
 * for user-specific data and implements public read access with owner-only
 * writes for top-level 'items'. All write operations require authentication,
 * and data relationships are validated on creation to ensure integrity.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 * - /items/{itemId}: Stores items available for swapping, with 'ownerId' linking to a user.
 * - /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}: Stores swap requests.
 * - /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}/messages/{messageId}: Stores messages within swap requests.
 * - /categories/{categoryId}: Stores item categories (publicly readable).
 *
 * Key Security Decisions:
 * - Items are now at the top-level collection for easy listing across all users.
 * - Listing of all items is allowed for all users (public read).
 * - Only the item owner can create, update, or delete an item.
 * - Swap requests and messages are nested under users and items for granular access control.
 *
 * Denormalization for Authorization:
 * - The `Item` document includes an `ownerId` field to enable simple ownership checks for write operations.
 * - Swap requests are nested under the target item and the target user so that the path itself can be used for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the ownerId of the existing document.
     */
    function isExistingOwner(ownerId) {
      return isSignedIn() && request.auth.uid == ownerId && resource != null;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates a profile at /users/user123.
     * @deny (create) User with UID 'user123' tries to create a profile at /users/user456.
     * @deny (update) User attempts to update a non-existent profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to items while restricting write access to the owner.
     * @path /items/{itemId}
     * @allow (get, list) Any user can read any item.
     * @allow (create) User with UID 'user123' creates an item with ownerId: 'user123'.
     * @deny (create) User with UID 'user123' creates an item with ownerId: 'user456'.
     * @deny (update) User with UID 'user123' tries to update an item owned by 'user456'.
     * @principle Allows public read with owner-only writes.
     */
    match /items/{itemId} {
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Securely manages swap requests between users.
     * @path /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}
     * @allow (create) User 'requester123' creates a swap request under /users/target456/items/item789/swapRequests/swap999, with requesterId: 'requester123'.
     * @allow (get, list) User with UID 'user123' retrieves swap requests where targetOwnerId is user123.
     * @deny (create) User 'requester123' creates a swap request under /users/target456/items/item789/swapRequests/swap999, with requesterId: 'otherUser'.
     * @deny (update) User attempts to update a non-existent swap request.
     * @principle Restricts swap requests to involved parties, based on path and requesterId.
     */
    match /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId} {
      allow get, list: if isOwner(targetOwnerId);
      allow create: if isSignedIn() && request.resource.data.requesterId == request.auth.uid && request.resource.data.targetOwnerId == targetOwnerId;
      allow update: if isExistingOwner(targetOwnerId);
      allow delete: if isExistingOwner(targetOwnerId);
    }

    /**
     * @description Secures messages within a swap request, ensuring only participants can access them.
     * @path /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}/messages/{messageId}
     * @allow (create) User 'user123' creates a message under /users/target456/items/item789/swapRequests/swap999/messages/message111, with senderId: 'user123'.
     * @allow (get, list) User with UID 'user123' retrieves messages under /users/target456/items/item789/swapRequests/swap999 where targetOwnerId is user123.
     * @deny (create) User 'user123' creates a message under /users/target456/items/item789/swapRequests/swap999/messages/message111, with senderId: 'otherUser'.
     * @deny (update) User attempts to update a non-existent message.
     * @principle Restricts message access to involved parties in the swap request.
     */
    match /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}/messages/{messageId} {
      allow get, list: if isOwner(targetOwnerId);
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
      allow update: if isExistingOwner(targetOwnerId);
      allow delete: if isExistingOwner(targetOwnerId);
    }

    /**
     * @description Allows public read access to item categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read any category.
     * @deny (create, update, delete) No user can create, update, or delete a category.
     * @principle Allows public read access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for the Tabdeel platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and swap requests.
 * Items are stored in a top-level collection for efficient querying, but ownership is still validated.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /items/{itemId}: Stores item data, readable by anyone, but writable only by the owner.
 * - /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}: Stores swap requests, accessible only to the involved parties.
 * - /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}/messages/{messageId}: Stores messages within a swap request, accessible only to involved parties.
 * - /categories/{categoryId}: Stores item categories, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Items are publicly readable, but only the owner can modify them.
 * - Swap requests and messages are restricted to the users involved in the swap.
 * - Listing of users is disallowed to prevent scraping.
 *
 * Denormalization for Authorization:
 * - SwapRequests: The `targetOwnerId` field is denormalized to allow direct rule checks without requiring additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a helper function to check if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a helper function to check if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines a helper function to check if the authenticated user is the existing owner of the resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their profile if request.auth.uid == userId.
     * @allow (get) User 'user_abc' can read their own profile.
     * @allow (update) User 'user_abc' can update their own profile.
     * @allow (delete) User 'user_abc' can delete their own profile.
     * @deny (create) User 'user_def' cannot create a profile with userId 'user_abc'.
     * @deny (get) User 'user_def' cannot read user 'user_abc' profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for items.
     * @path /items/{itemId}
     * @allow (get, list) Any user can read/list any item.
     * @allow (create) User 'user_abc' can create an item with ownerId 'user_abc'.
     * @allow (update) User 'user_abc' can update their item.
     * @allow (delete) User 'user_abc' can delete their item.
     * @deny (create) User 'user_def' cannot create an item with ownerId 'user_abc'.
     * @deny (update) User 'user_def' cannot update item owned by user 'user_abc'.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /items/{itemId} {
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Security rules for swap requests.
     * @path /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}
     * @allow (create) User 'requester_abc' can create a swap request for targetOwnerId 'target_abc' and item 'item_xyz' if request.auth.uid == 'requester_abc'.
     * @allow (get) User 'user_abc' can read swap request where targetOwnerId == 'user_abc' || requesterId == 'user_abc'.
     * @allow (update) User 'user_abc' can update swap request where targetOwnerId == 'user_abc' || requesterId == 'user_abc'.
     * @allow (delete) User 'user_abc' can delete swap request where targetOwnerId == 'user_abc' || requesterId == 'user_abc'.
     * @deny (create) User 'user_def' cannot create a swap request for targetOwnerId 'target_abc' and item 'item_xyz'.
     * @deny (get) User 'user_def' cannot read swap request where targetOwnerId != 'user_def' && requesterId != 'user_def'.
     * @principle Restricts access to swap requests to the involved users.
     */
    match /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId} {
      allow get: if isSignedIn() && (targetOwnerId == request.auth.uid || request.auth.uid == request.resource.data.requesterId);
      allow list: if isSignedIn() && targetOwnerId == request.auth.uid;

      allow create: if isSignedIn() && request.resource.data.requesterId == request.auth.uid;
      allow update: if isExistingOwner(targetOwnerId) || (isSignedIn() && resource.data.requesterId == request.auth.uid);
      allow delete: if isExistingOwner(targetOwnerId) || (isSignedIn() && resource.data.requesterId == request.auth.uid);
    }

    /**
     * @description Security rules for messages within a swap request.
     * @path /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}/messages/{messageId}
     * @allow (create) User can create a message if they are part of the swap request.
     * @allow (get) User can read a message if they are part of the swap request.
     * @allow (update) User can update a message if they are part of the swap request.
     * @allow (delete) User can delete a message if they are part of the swap request.
     * @deny (create) User cannot create a message if they are not part of the swap request.
     * @deny (get) User cannot read a message if they are not part of the swap request.
     * @principle Restricts access to messages to users involved in the corresponding swap request.
     */
    match /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}/messages/{messageId} {
      allow get: if isSignedIn() && (targetOwnerId == request.auth.uid || get(/databases/$(database)/documents/users/$(targetOwnerId)/items/$(targetItemId)/swapRequests/$(swapRequestId)).data.requesterId == request.auth.uid);
      allow list: if isSignedIn() && targetOwnerId == request.auth.uid;

      allow create: if isSignedIn() && (targetOwnerId == request.auth.uid || get(/databases/$(database)/documents/users/$(targetOwnerId)/items/$(targetItemId)/swapRequests/$(swapRequestId)).data.requesterId == request.auth.uid);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read or list any category.
     * @principle Allows public read access to categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;

      allow create, update, delete: if false;
    }
  }
}
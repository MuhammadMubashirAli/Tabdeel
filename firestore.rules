/**
 * @fileoverview Firestore Security Rules for Tabdeel Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and items.
 * Swap requests and messages have shared access, restricted to the involved parties.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. The 'userId' MUST match the Firebase Auth UID.
 * - /items/{itemId}: Stores item data. Each item has an 'ownerId' field that MUST match the user who created it.
 * - /swapRequests/{swapRequestId}: Stores swap request data, with fields for target item owner and request initiator.
 * - /swapRequests/{swapRequestId}/messages/{messageId}: Stores messages for a specific swap request, accessible only to the involved users.
 * - /categories/{categoryId}: Stores item categories. This collection is publicly readable.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only create, update, and delete items they own.
 * - Swap requests and messages are only accessible to the users involved in the swap.
 * - Categories are publicly readable.
 * - Listing all documents in the `users` collection is disallowed.
 *
 * Denormalization for Authorization:
 * - Items store the ownerId directly on the item document for easy ownership checks.
 * - SwapRequests store the targetOwnerId and requesterId directly on the document to easily determine who is involved.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can create their profile.
     * @allow (get) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can read their profile.
     * @allow (update) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can update their profile.
     * @allow (delete) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can delete their profile.
     * @deny (create) User with UID 'otherUserId' cannot create a profile for 'NbUF7Ud3rlVpatDcXk0OHylFIg13'.
     * @deny (get) User with UID 'otherUserId' cannot read the profile of 'NbUF7Ud3rlVpatDcXkk0OHylFIg13'.
     * @deny (update) User with UID 'otherUserId' cannot update the profile of 'NbUF7Ud3rlVpatDcXk0OHylFIg13'.
     * @deny (delete) User with UID 'otherUserId' cannot delete the profile of 'NbUF7Ud3rlVpatDcXk0OHylFIg13'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages items listed for barter.
     * @path /items/{itemId}
     * @allow (create) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can create an item with ownerId 'NbUF7Ud3rlVpatDcXk0OHylFIg13'.
     * @allow (get) Any user can read any item.
     * @allow (list) Any user can list all items.
     * @allow (update) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can update an item they own.
     * @allow (delete) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can delete an item they own.
     * @deny (create) User with UID 'otherUserId' cannot create an item with ownerId 'NbUF7Ud3rlVpatDcXk0OHylFIg13'.
     * @deny (update) User with UID 'otherUserId' cannot update an item owned by 'NbUF7Ud3rlVpatDcXk0OHylFIg13'.
     * @deny (delete) User with UID 'otherUserId' cannot delete an item owned by 'NbUF7Ud3rlVpatDcXk0OHylFIg13'.
     * @principle Enforces document ownership for writes, public read.
     */
    match /items/{itemId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Manages swap requests between users.
     * @path /swapRequests/{swapRequestId}
     * @allow (create) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can create a swap request where they are the requester or target owner.
     * @allow (get) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can read a swap request where they are the requester or target owner.
     * @allow (list) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can list swap requests where they are the requester or target owner.
     * @allow (update) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can update a swap request where they are the requester or target owner.
     * @allow (delete) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can delete a swap request where they are the requester or target owner.
     * @deny (create) User with UID 'otherUserId' cannot create a swap request where they are neither the requester nor the target owner.
     * @deny (get) User with UID 'otherUserId' cannot read a swap request where they are neither the requester nor the target owner.
     * @deny (update) User with UID 'otherUserId' cannot update a swap request where they are neither the requester nor the target owner.
     * @deny (delete) User with UID 'otherUserId' cannot delete a swap request where they are neither the requester nor the target owner.
     * @principle Restricts access to swap requests to involved users.
     */
    match /swapRequests/{swapRequestId} {
      allow get, list: if isSignedIn() && (resource.data.targetOwnerId == request.auth.uid || resource.data.requesterId == request.auth.uid);
      allow create: if isSignedIn() && (request.resource.data.targetOwnerId == request.auth.uid || request.resource.data.requesterId == request.auth.uid);
      allow update: if isSignedIn() && (resource != null && (resource.data.targetOwnerId == request.auth.uid || resource.data.requesterId == request.auth.uid));
      allow delete: if isSignedIn() && (resource != null && (resource.data.targetOwnerId == request.auth.uid || resource.data.requesterId == request.auth.uid));
    }

    /**
     * @description Manages messages within a swap request.
     * @path /swapRequests/{swapRequestId}/messages/{messageId}
     * @allow (create) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can create a message in a swap request where they are a participant.
     * @allow (get) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can read a message in a swap request where they are a participant.
     * @allow (list) User with UID 'NbUF7Ud3rlVpatDcXk0OHylFIg13' can list messages in a swap request where they are a participant.
     * @allow (update) Never allow updates.
     * @allow (delete) Never allow deletes.
     * @deny (create) User with UID 'otherUserId' cannot create a message in a swap request where they are not a participant.
     * @deny (get) User with UID 'otherUserId' cannot read a message in a swap request where they are not a participant.
     * @principle Restricts access to messages to involved users in the swap request.
     */
    match /swapRequests/{swapRequestId}/messages/{messageId} {
        allow get, list: if isSignedIn() && get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.targetOwnerId == request.auth.uid || (isSignedIn() && get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.requesterId == request.auth.uid);
        allow create: if isSignedIn() && get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.targetOwnerId == request.auth.uid || (isSignedIn() && get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.requesterId == request.auth.uid);
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Manages item categories.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read any category.
     * @allow (list) Any user can list all categories.
     * @deny (create) No one can create categories via the client.
     * @deny (update) No one can update categories via the client.
     * @deny (delete) No one can delete categories via the client.
     * @principle Public read-only access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}
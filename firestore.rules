/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model with public read access to items.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.  Access is restricted to the owner.
 * - /items/{itemId}: Stores item data. Publicly readable, but writes are restricted to the item owner.
 * - /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}: Stores swap requests. Access is restricted to the involved parties.
 * - /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}/messages/{messageId}: Stores messages for swap requests. Access is restricted to involved parties.
 * - /categories/{categoryId}: Stores item categories. Publicly readable.
 *
 * Key Security Decisions:
 * - Items are publicly readable to enable the "Explore" feature.
 * - All write operations require user authentication (`request.auth != null`).
 * - Strict ownership is enforced for user profiles and item modifications.
 * - Swap requests and messages are secured to only allow access from involved parties.
 *
 * Denormalization for Authorization:
 * - Items contain an `ownerId` field to quickly verify ownership without needing to query the `/users` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user_abc' creates their profile.
     * @allow (get, update, delete) User with ID 'user_abc' reads/updates/deletes their profile.
     * @deny (create) User with ID 'user_abc' tries to create a profile for 'user_xyz'.
     * @deny (get, update, delete) User with ID 'user_xyz' tries to read/update/delete 'user_abc's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secure items. Items are publicly readable, but only the owner can modify them.
     * @path /items/{itemId}
     * @allow (get, list) Any user can read/list all items.
     * @allow (create) User with ID 'user_abc' creates an item with 'ownerId' set to 'user_abc'.
     * @allow (update, delete) User with ID 'user_abc' updates/deletes an item they own (where 'ownerId' == 'user_abc').
     * @deny (create) User with ID 'user_abc' tries to create an item with 'ownerId' set to 'user_xyz'.
     * @deny (update, delete) User with ID 'user_xyz' tries to update/delete an item owned by 'user_abc'.
     * @principle Public read, owner-only writes, and ownership validation on create.
     */
    match /items/{itemId} {
      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update: if request.auth != null && resource != null && isOwner(resource.data.ownerId);
      allow delete: if request.auth != null && resource != null && isOwner(resource.data.ownerId);
    }

    /**
     * @description Secure swap requests. Only the target item owner or the requester can access swap requests.
     * @path /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}
     * @allow (create) User 'requester_abc' creates a swap request for an item owned by 'target_owner_xyz'.
     * @allow (get, list) User 'target_owner_xyz' or 'requester_abc' can read/list swap requests related to the item.
     * @allow (update, delete) User 'target_owner_xyz' or 'requester_abc' can update/delete swap requests related to the item.
     * @deny (create) User 'outsider' tries to create a swap request for an item.
     * @deny (get, list, update, delete) User 'outsider' tries to access swap requests related to the item.
     * @principle Shared access pattern for collaborative documents.
     */
    match /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId} {
      function isOwner(targetOwnerId) {
        return request.auth != null && request.auth.uid == targetOwnerId;
      }

       function isRequester(requesterId) {
        return request.auth != null && request.auth.uid == requesterId;
      }

      allow get: if request.auth != null && (isOwner(targetOwnerId) || isRequester(resource.data.requesterId));
      allow list: if request.auth != null && isOwner(targetOwnerId); // Only the target owner can list.
      allow create: if request.auth != null && request.resource.data.requesterId == request.auth.uid && request.resource.data.targetOwnerId == targetOwnerId;
      allow update: if request.auth != null && resource != null && (isOwner(targetOwnerId) || isRequester(resource.data.requesterId));
      allow delete: if request.auth != null && resource != null && (isOwner(targetOwnerId) || isRequester(resource.data.requesterId));
    }

    /**
     * @description Secure messages within a swap request. Only users involved in the swap request can access messages.
     * @path /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}/messages/{messageId}
     * @allow (create) User involved in the swap request can create a message.
     * @allow (get, list) User involved in the swap request can read/list messages.
     * @allow (update, delete) No one can update or delete messages.
     * @deny (create, get, list, update, delete) User not involved in the swap request cannot access messages.
     * @principle Shared access pattern for collaborative documents; Immutable messages.
     */
    match /users/{targetOwnerId}/items/{targetItemId}/swapRequests/{swapRequestId}/messages/{messageId} {
          function isOwner(targetOwnerId) {
        return request.auth != null && request.auth.uid == targetOwnerId;
      }

       function isRequester(requesterId) {
        return request.auth != null && request.auth.uid == requesterId;
      }
       function isInvolved(targetOwnerId,requesterId) {
           return isOwner(targetOwnerId) || isRequester(requesterId)
       }

      allow get, list: if request.auth != null && isInvolved(targetOwnerId,resource.data.senderId);
      allow create: if request.auth != null && isInvolved(targetOwnerId,request.auth.uid);
      allow update, delete: if false;
    }

    /**
     * @description Secure item categories. Categories are publicly readable.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read/list categories.
     * @deny (create, update, delete) No one can create/update/delete categories (admin only - not implemented).
     * @principle Public read, restricted writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for Tabdeel platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and items.
 * SwapRequests are accessible to involved parties. Public read access is granted for categories and items.
 *
 * Data Structure:
 * - /users/{userId}: User profile information. 'userId' must match the authenticated user's UID.
 * - /items/{itemId}: Items listed for barter.
 * - /swapRequests/{swapRequestId}: Swap requests between users.
 * - /swapRequests/{swapRequestId}/messages/{messageId}: Messages within a swap request.
 * - /categories/{categoryId}: Item categories.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Items can be created by anyone, but only the owner can modify/delete them.
 * - SwapRequests are accessible to involved parties (requester and target owner).
 * - Categories are publicly readable.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `Item` entity has an `ownerId` field, enabling direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants owner-only access to user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user's UID matches the 'userId' path segment.
     * @deny (get, create, update, delete) if the user's UID does not match the 'userId' path segment.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to items, and owner-only write access.
     * @path /items/{itemId}
     * @allow (get, list) to all users (public read).
     * @allow (create) if the 'ownerId' field in the request matches the user's UID.
     * @allow (update, delete) if the user's UID matches the 'ownerId' field in the existing document.
     * @deny (create) if the 'ownerId' field in the request does not match the user's UID.
     * @deny (update, delete) if the user's UID does not match the 'ownerId' field in the existing document.
     * @principle Enforces document ownership for writes while allowing public reads.
     */
    match /items/{itemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Grants access to swap requests to involved parties (requester and target owner).
     * @path /swapRequests/{swapRequestId}
     * @allow (get, list) if the user is either the requester or the target owner.
     * @allow (create) to all authenticated users.
     * @allow (update, delete) if the user is either the requester or the target owner and the document exists.
     * @deny (get, list) if the user is neither the requester nor the target owner.
     * @deny (create) if the user is not authenticated.
     * @deny (update, delete) if the user is neither the requester nor the target owner or the document does not exist.
     * @principle Enforces access control based on participation in the swap request.
     */
    match /swapRequests/{swapRequestId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant(swapRequest) {
        return isSignedIn() && (request.auth.uid == swapRequest.requesterId || request.auth.uid == swapRequest.targetOwnerId);
      }

      function isExistingParticipant(swapRequest) {
        return isParticipant(swapRequest) && resource != null;
      }

      allow get: if isParticipant(resource.data);
      allow list: if isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id == request.auth.uid);

      allow create: if isSignedIn();
      allow update: if isExistingParticipant(resource.data);
      allow delete: if isExistingParticipant(resource.data);
    }

    /**
     * @description Grants access to messages within a swap request to participants of the request.
     * @path /swapRequests/{swapRequestId}/messages/{messageId}
     * @allow (get, list) if the user is a participant in the swap request.
     * @allow (create) if the user is a participant in the swap request.
     * @allow (update, delete) never. Messages cannot be updated or deleted.
     * @deny (get, list, create) if the user is not a participant in the swap request.
     * @principle Enforces access control based on participation in the parent swap request.
     */
    match /swapRequests/{swapRequestId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSwapRequestParticipant() {
        return isSignedIn() && get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.requesterId == request.auth.uid || get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.targetOwnerId == request.auth.uid
      }

      allow get: if isSwapRequestParticipant();
      allow list: if isSwapRequestParticipant();
      allow create: if isSwapRequestParticipant();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to categories.
     * @path /categories/{categoryId}
     * @allow (get, list) to all users (public read).
     * @deny (create, update, delete) to all users. Write operations are not permitted in this prototype.
     * @principle Allows public access to category information.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}
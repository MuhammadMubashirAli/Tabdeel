/**
 * @fileoverview Firestore Security Rules for Tabdeel Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and items.
 * Swap requests and messages have shared access, with access granted to the involved parties.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. 'userId' must match the Firebase Auth UID.
 * - /items/{itemId}: Stores items for trade. Each item has an 'ownerId' field.
 * - /swapRequests/{swapRequestId}: Stores swap requests.
 * - /swapRequests/{swapRequestId}/messages/{messageId}: Stores messages within a swap request.
 * - /categories/{categoryId}: Stores item categories. Intended to be publicly readable.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only create, update, and delete items they own.
 * - Swap requests are accessible to the target user and the requester.
 * - Messages within a swap request are accessible only to the involved parties.
 * - Categories are publicly readable.
 *
 * Denormalization for Authorization:
 * - Items have an `ownerId` field to easily enforce ownership.
 * - SwapRequests has `targetOwnerId` and `requesterId` for easy shared access rule.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) If the user's auth UID matches the 'userId'.
     * @allow (get, list, update, delete) If the user's auth UID matches the 'userId'.
     * @deny (create) If the user's auth UID does not match the 'userId'.
     * @deny (update, delete) If the user does not own the profile document.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages items for trade.
     * @path /items/{itemId}
     * @allow (get, list) Publicly readable.
     * @allow (create) If the user is signed in and the item's 'ownerId' matches the user's UID.
     * @allow (update, delete) If the user owns the item and it exists.
     * @deny (create) If the item's 'ownerId' does not match the user's UID.
     * @deny (update, delete) If the user does not own the item or the item does not exist.
     * @principle Enforces document ownership for items, allowing public reads.
     */
    match /items/{itemId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    /**
     * @description Manages swap requests between users.
     * @path /swapRequests/{swapRequestId}
     * @allow (get, list) If the user is the target or the requester.
     * @allow (create) If the user is signed in.
     * @allow (update) If the user is the target or the requester and the document exists.
     * @allow (delete) If false (no delete allowed).
     * @deny (create) If the user is not signed in.
     * @deny (update) If the user is not the target or the requester or the document does not exist.
     * @principle Allows access to swap requests for involved parties.
     */
    match /swapRequests/{swapRequestId} {
      function isTargetOrRequester(targetOwnerId, requesterId) {
        return request.auth.uid == targetOwnerId || request.auth.uid == requesterId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn() && isTargetOrRequester(resource.data.targetOwnerId, resource.data.requesterId);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isTargetOrRequester(resource.data.targetOwnerId, resource.data.requesterId);
      allow delete: if false;
    }

    /**
     * @description Manages messages within a swap request.
     * @path /swapRequests/{swapRequestId}/messages/{messageId}
     * @allow (get, list) If the user is part of the swap request.
     * @allow (create) If the user is part of the swap request.
     * @allow (update, delete) If false (no updates or deletes allowed).
     * @deny (create, get, list) If the user is not part of the swap request.
     * @principle Allows access to messages for involved parties in a swap request.
     */
    match /swapRequests/{swapRequestId}/messages/{messageId} {
      function isTargetOrRequester() {
        return get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.targetOwnerId == request.auth.uid
            || get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.requesterId == request.auth.uid;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn() && isTargetOrRequester();
      allow create: if isSignedIn() && isTargetOrRequester();
      allow update, delete: if false;
    }

    /**
     * @description Manages item categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) If false (no writes allowed).
     * @principle Allows public reads for item categories, restricts writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}
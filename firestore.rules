/**
 * @fileoverview Firestore Security Rules for Tabdeel (Prototyping Mode)
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and access controls.
 * It defaults to a "least privilege" approach, requiring explicit authorization for all operations.
 * Data shape validation is minimized for rapid prototyping but authorization checks are strictly enforced.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 * - /items/{itemId}: Stores items available for barter.
 * - /swapRequests/{swapRequestId}: Stores swap requests between users.
 * - /swapRequests/{swapRequestId}/messages/{messageId}: Stores messages within a swap request.
 * - /categories/{categoryId}: Stores item categories.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Items are publicly readable, but only the owner can modify them. The `ownerId` field within the item document is used to enforce this.
 * - Swap requests can be read and written by the involved users.
 * - Messages within swap requests can be read and written only by the participants of that request.
 * - Categories are publicly readable.
 * - Listing users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `/items/{itemId}` document has an `ownerId` field to quickly check ownership without extra reads.
 * - The `/swapRequests/{swapRequestId}` document has `targetOwnerId` and `requesterId` fields to quickly determine involved users.
 * - The `/swapRequests/{swapRequestId}/messages/{messageId}` document has a `senderId` field to track message authorship and authorize senders.
 *
 * Structural Segregation:
 * - There is no segregation of data. All data is stored in a single collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile with matching UID.
     * @allow (get, update, delete) Signed-in user accesses their own profile.
     * @deny (create) User attempts to create a profile with a mismatched UID.
     * @deny (get, update, delete) User attempts to access another user's profile.
     * @principle Enforces document ownership for all operations. Validates relational integrity on create and update.
     */
    match /users/{userId} {
      // Verified user identity
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages items for barter. Items are publicly readable, but only the owner can modify them.
     * @path /items/{itemId}
     * @allow (get, list) Any user can view item details.
     * @allow (create) Signed-in user creates a new item with their UID as the ownerId.
     * @allow (update, delete) Signed-in user modifies/deletes their own item.
     * @deny (create) User attempts to create an item with a mismatched ownerId.
     * @deny (update, delete) User attempts to modify/delete an item they don't own.
     * @principle Allows public read access while enforcing document ownership for writes.
     */
    match /items/{itemId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Manages swap requests between users. Only involved users can access swap requests.
     * @path /swapRequests/{swapRequestId}
     * @allow (get, list) Involved users can view swap request details.
     * @allow (create) Signed-in user creates a swap request.
     * @allow (update, delete) Involved users can update/delete a swap request.
     * @deny (create) User attempts to create a swap request with invalid data.
     * @deny (update, delete) User attempts to modify/delete a swap request they are not involved in.
     * @principle Restricts access to swap requests to involved users only.
     */
    match /swapRequests/{swapRequestId} {
      allow get: if isSignedIn() && (resource.data.targetOwnerId == request.auth.uid || resource.data.requesterId == request.auth.uid);
      allow list: if isSignedIn() && (resource.data.targetOwnerId == request.auth.uid || resource.data.requesterId == request.auth.uid);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.requesterId;
      allow update: if isSignedIn() && (isExistingOwner(resource.data.targetOwnerId) || isExistingOwner(resource.data.requesterId));
      allow delete: if isSignedIn() && (isExistingOwner(resource.data.targetOwnerId) || isExistingOwner(resource.data.requesterId));
    }

    /**
     * @description Manages messages within a swap request. Only participants of the swap request can access messages.
     * @path /swapRequests/{swapRequestId}/messages/{messageId}
     * @allow (get, list) Participants can view messages within the swap request.
     * @allow (create) Participants can send messages within the swap request.
     * @deny (create) User attempts to send a message to a swap request they are not involved in.
     * @principle Restricts access to messages to participants of the parent swap request.
     */
    match /swapRequests/{swapRequestId}/messages/{messageId} {
        allow get: if isSignedIn() && get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.targetOwnerId == request.auth.uid || get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.requesterId == request.auth.uid;
        allow list: if isSignedIn() && get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.targetOwnerId == request.auth.uid || get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.requesterId == request.auth.uid;
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.senderId && (get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.targetOwnerId == request.auth.uid || get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.requesterId == request.auth.uid);
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Manages item categories. Categories are publicly readable.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can view category details.
     * @deny (create, update, delete) No user can modify categories.
     * @principle Allows public read access and restricts write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}
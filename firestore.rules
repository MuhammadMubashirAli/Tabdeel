/**
 * @fileoverview Firestore Security Rules for Tabdeel - Prototyping Mode.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure authorization model while relaxing data validation
 * to facilitate rapid prototyping. It enforces strict ownership and access control
 * based on user identity.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. 'userId' MUST match the Firebase auth UID.
 * - /items/{itemId}: Stores items for barter. Documents MUST contain an 'ownerId' field.
 * - /swapRequests/{swapRequestId}: Stores swap requests between users.
 * - /swapRequests/{swapRequestId}/messages/{messageId}: Stores messages related to a specific swap request.
 * - /categories/{categoryId}: Stores item categories (publicly readable).
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Items are publicly readable but only the owner can modify them.
 * - Swap requests and associated messages have no read and write rules for a user,
 * - Categories are publicly readable, but only the owner can modify them.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile access. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user_abc' can create their profile.
     * @deny (create) User with ID 'user_xyz' cannot create a profile for 'user_abc'.
     * @allow (get) User with ID 'user_abc' can read their own profile.
     * @deny (get) User with ID 'user_xyz' cannot read the profile of 'user_abc'.
     * @allow (update) User with ID 'user_abc' can update their own profile.
     * @deny (update) User with ID 'user_xyz' cannot update the profile of 'user_abc'.
     * @allow (delete) User with ID 'user_abc' can delete their own profile.
     * @deny (delete) User with ID 'user_xyz' cannot delete the profile of 'user_abc'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to items. Items are publicly readable, but only the owner can modify them.
     * @path /items/{itemId}
     * @allow (get) Any user can read an item's details.
     * @deny (create) User cannot create a item document.
     * @deny (update) User cannot update item document.
     * @deny (delete) User cannot delete item document.
     * @principle Public read access with owner-only writes.
     */
    match /items/{itemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to swap requests.
     * @path /swapRequests/{swapRequestId}
     * @allow (get)  Any user can read a swap request's details.
     * @deny (create) User cannot create swap request document.
     * @deny (update) User cannot update swap request document.
     * @deny (delete) User cannot delete swap request document.
     * @principle  No user specific rules.
     */
    match /swapRequests/{swapRequestId} {
       allow get: if true;
       allow list: if true;
       allow create: if false;
       allow update: if false;
       allow delete: if false;
    }

    /**
     * @description Manages access to messages within swap requests.
     * @path /swapRequests/{swapRequestId}/messages/{messageId}
     * @allow (get)  Any user can read a message details.
     * @deny (create) User cannot create message document.
     * @deny (update) User cannot update message document.
     * @deny (delete) User cannot delete message document.
     * @principle No user specific rules.
     */
    match /swapRequests/{swapRequestId}/messages/{messageId} {
       allow get: if true;
       allow list: if true;
       allow create: if false;
       allow update: if false;
       allow delete: if false;
    }

    /**
     * @description Manages access to item categories. Categories are publicly readable.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read a category's details.
     * @deny (create) User cannot create category document.
     * @deny (update) User cannot update category document.
     * @deny (delete) User cannot delete category document.
     * @principle Public read access.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
       allow create: if false;
       allow update: if false;
       allow delete: if false;
    }
  }
}
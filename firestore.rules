/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and items,
 * with public read access to items. Swap requests and messages are secured based on
 * participation. Categories are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, where userId is the Firebase Auth UID.
 * - /items/{itemId}: Items available for swap, with an ownerId field.
 * - /swapRequests/{swapRequestId}: Swap requests between users.
 * - /swapRequests/{swapRequestId}/messages/{messageId}: Messages within a swap request.
 * - /categories/{categoryId}: Item categories.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Items are publicly readable, but only the owner can modify them.
 * - Swap requests are secured to participants.
 * - Messages are secured to participants of the associated swap request.
 * - Categories are publicly readable.
 *
 * Denormalization for Authorization:
 * - Items have an `ownerId` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with matching auth UID can create their profile.
     * @allow (get, update, delete) Signed-in user can access their own profile.
     * @deny (get, update, delete) Signed-in user cannot access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read items, but only the owner can modify them.
     * @path /items/{itemId}
     * @allow (get, list) Anyone can read items.
     * @allow (create) Signed-in user can create an item with their UID as ownerId.
     * @allow (update, delete) Only the item owner can modify or delete it.
     * @deny (update, delete) Non-owners cannot modify or delete items.
     * @principle Allows public read access with owner-only writes.
     */
    match /items/{itemId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isOwner(ownerId) {
            return isSignedIn() && request.auth.uid == ownerId;
        }
        function isExistingOwner(ownerId) {
            return isOwner(ownerId) && resource != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.ownerId);
        allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Allows participants of a swap request to read and write to it.
     * @path /swapRequests/{swapRequestId}
     * @allow (get, list) Participants can read swap requests.
     * @allow (create) Signed-in users can create swap requests.
     * @allow (update, delete) Only participants can update or delete swap requests.
     * @deny (get, list, update, delete) Non-participants cannot access swap requests.
     * @principle Restricts access to swap requests to involved users.
     */
    match /swapRequests/{swapRequestId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isParticipant(swapRequest) {
            return isSignedIn() && (swapRequest.requesterId == request.auth.uid || swapRequest.targetOwnerId == request.auth.uid);
        }
        function isExistingParticipant(swapRequest) {
            return isParticipant(swapRequest) && resource != null;
        }
      allow get: if isSignedIn() && (resource.data.requesterId == request.auth.uid || resource.data.targetOwnerId == request.auth.uid);
      allow list: if isSignedIn() && (resource.data.requesterId == request.auth.uid || resource.data.targetOwnerId == request.auth.uid);
      allow create: if isSignedIn();
      allow update: if isExistingParticipant(resource.data);
      allow delete: if isExistingParticipant(resource.data);
    }

    /**
     * @description Allows participants of a swap request to read and write messages within it.
     * @path /swapRequests/{swapRequestId}/messages/{messageId}
     * @allow (get, list) Participants can read messages within a swap request.
     * @allow (create) Signed-in users can create messages within a swap request they are part of.
     * @allow (update, delete) No one can update or delete messages (disabled).
     * @deny (get, list, create) Non-participants cannot access messages.
     * @principle Restricts access to messages to participants of the parent swap request.
     */
    match /swapRequests/{swapRequestId}/messages/{messageId} {
      function isSignedIn() {
          return request.auth != null;
      }
        function isSwapRequestParticipant(swapRequestId) {
            return get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.requesterId == request.auth.uid
                || get(/databases/$(database)/documents/swapRequests/$(swapRequestId)).data.targetOwnerId == request.auth.uid;
        }
      allow get, list: if isSignedIn() && isSwapRequestParticipant(swapRequestId);
      allow create: if isSignedIn() && isSwapRequestParticipant(swapRequestId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Anyone can read categories.
     * @deny (create, update, delete) No one can create, update, or delete categories.
     * @principle Provides public read access to categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}